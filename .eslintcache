[{"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\index.tsx":"1","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\App.tsx":"2","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\DashboardPage.tsx":"3","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\config.tsx":"4","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\AccountPage.tsx":"5","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\components\\ActionCard.tsx":"6","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\ActionPage.tsx":"7","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\ActionForm.tsx":"8","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\ColorButton.tsx":"9","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\IconButton.tsx":"10","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\WeekdayButton.tsx":"11","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\theme.tsx":"12","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\auth\\AuthPage.tsx":"13","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\hooks\\useMobile.tsx":"14","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\auth\\components\\AuthBanner.tsx":"15","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\auth\\components\\AuthForm.tsx":"16","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\helper.tsx":"17","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\store.tsx":"18","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\reducers\\auth.ts":"19","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actionTypes.ts":"20","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actions\\auth.ts":"21","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\urls.tsx":"22","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\temp\\Chart.tsx":"23","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\temp\\Orders.tsx":"24","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\temp\\Deposits.tsx":"25","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\Title.tsx":"26","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\Copyright.tsx":"27","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\AppIcon.tsx":"28","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\Loading.tsx":"29","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\NavWrapper.tsx":"30","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\ToastMsg.tsx":"31","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\navListItems.tsx":"32","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\NavBar.tsx":"33","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\NavDrawer.tsx":"34","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\TrackingPage.tsx":"35","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\ActionList.tsx":"36","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\reducers\\action.ts":"37","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actions\\action.ts":"38","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\reducers\\tracking.ts":"39","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actions\\tracking.tsx":"40","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\components\\TrackCalendar.tsx":"41","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\components\\TrackingList.tsx":"42"},{"size":959,"mtime":1609940531975,"results":"43","hashOfConfig":"44"},{"size":2016,"mtime":1609991525282,"results":"45","hashOfConfig":"44"},{"size":4360,"mtime":1609952591405,"results":"46","hashOfConfig":"44"},{"size":1208,"mtime":1610264965630,"results":"47","hashOfConfig":"44"},{"size":5863,"mtime":1609952566290,"results":"48","hashOfConfig":"44"},{"size":6583,"mtime":1610291517754,"results":"49","hashOfConfig":"44"},{"size":4853,"mtime":1610282312005,"results":"50","hashOfConfig":"44"},{"size":13748,"mtime":1610265011648,"results":"51","hashOfConfig":"44"},{"size":2043,"mtime":1610085707657,"results":"52","hashOfConfig":"44"},{"size":2247,"mtime":1610086995003,"results":"53","hashOfConfig":"44"},{"size":1651,"mtime":1610017578820,"results":"54","hashOfConfig":"44"},{"size":738,"mtime":1610086133036,"results":"55","hashOfConfig":"44"},{"size":714,"mtime":1609945941451,"results":"56","hashOfConfig":"44"},{"size":236,"mtime":1609943068090,"results":"57","hashOfConfig":"44"},{"size":2556,"mtime":1609952590599,"results":"58","hashOfConfig":"44"},{"size":8926,"mtime":1609955238630,"results":"59","hashOfConfig":"44"},{"size":1114,"mtime":1610091463187,"results":"60","hashOfConfig":"44"},{"size":639,"mtime":1610266234513,"results":"61","hashOfConfig":"44"},{"size":584,"mtime":1609991521713,"results":"62","hashOfConfig":"44"},{"size":384,"mtime":1610268208668,"results":"63","hashOfConfig":"44"},{"size":1507,"mtime":1609944692223,"results":"64","hashOfConfig":"44"},{"size":282,"mtime":1610267492289,"results":"65","hashOfConfig":"44"},{"size":1576,"mtime":1609952563628,"results":"66","hashOfConfig":"44"},{"size":2586,"mtime":1609952565213,"results":"67","hashOfConfig":"44"},{"size":874,"mtime":1609952564422,"results":"68","hashOfConfig":"44"},{"size":438,"mtime":1609952561097,"results":"69","hashOfConfig":"44"},{"size":584,"mtime":1609952580331,"results":"70","hashOfConfig":"44"},{"size":1082,"mtime":1609952589063,"results":"71","hashOfConfig":"44"},{"size":467,"mtime":1609952607983,"results":"72","hashOfConfig":"44"},{"size":1934,"mtime":1610286409374,"results":"73","hashOfConfig":"44"},{"size":605,"mtime":1610269734047,"results":"74","hashOfConfig":"44"},{"size":2964,"mtime":1609954775975,"results":"75","hashOfConfig":"44"},{"size":2155,"mtime":1609953987615,"results":"76","hashOfConfig":"44"},{"size":2102,"mtime":1609953849622,"results":"77","hashOfConfig":"44"},{"size":1278,"mtime":1610291502217,"results":"78","hashOfConfig":"44"},{"size":4218,"mtime":1610093242295,"results":"79","hashOfConfig":"44"},{"size":383,"mtime":1610034144578,"results":"80","hashOfConfig":"44"},{"size":2512,"mtime":1610091939283,"results":"81","hashOfConfig":"44"},{"size":936,"mtime":1610268211881,"results":"82","hashOfConfig":"44"},{"size":2186,"mtime":1610278340296,"results":"83","hashOfConfig":"44"},{"size":5679,"mtime":1610292395885,"results":"84","hashOfConfig":"44"},{"size":2473,"mtime":1610291521356,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"tkoe18",{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\index.tsx",[],["181","182"],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\App.tsx",["183"],"import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport AuthPage from \"./pages/auth/AuthPage\";\nimport NavWrapper from \"./components/nav/NavWrapper\";\nimport TrackingPage from \"./pages/tracking/TrackingPage\";\nimport ActionPage from \"./pages/actions/ActionPage\";\nimport DashboardPage from \"./pages/DashboardPage\";\nimport AccountPage from \"./pages/AccountPage\";\n\nimport * as authActions from \"./redux/actions/auth\";\nimport { State } from \"./redux/redux\";\nimport Loading from \"./components/ui/Loading\";\n\nconst GuardedRoute = ({ children, auth, redirect, ...rest }) => (\n  <Route\n    {...rest}\n    render={() => (auth ? children : <Redirect to={redirect} />)}\n  />\n);\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const { token, tokenCheck } = useSelector((state: State) => state.auth);\n\n  useEffect(() => {\n    dispatch(authActions.tokenLogin());\n  }, []);\n\n  if (!tokenCheck) {\n    return <Loading />;\n  }\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <GuardedRoute path=\"/tracking\" auth={!!token} redirect=\"/\">\n          <NavWrapper pageTitle=\"Tracking\">\n            <TrackingPage />\n          </NavWrapper>\n        </GuardedRoute>\n        <GuardedRoute path=\"/actions\" auth={!!token} redirect=\"/\">\n          <NavWrapper pageTitle=\"Actions\">\n            <ActionPage />\n          </NavWrapper>\n        </GuardedRoute>\n        <GuardedRoute path=\"/dashboard\" auth={!!token} redirect=\"/\">\n          <NavWrapper pageTitle=\"Dashboard\">\n            <DashboardPage />\n          </NavWrapper>\n        </GuardedRoute>\n        <GuardedRoute path=\"/account\" auth={!!token} redirect=\"/\">\n          <NavWrapper pageTitle=\"Account\">\n            <AccountPage />\n          </NavWrapper>\n        </GuardedRoute>\n        <GuardedRoute path=\"/\" exact auth={!token} redirect=\"/tracking\">\n          <AuthPage />\n        </GuardedRoute>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\DashboardPage.tsx",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"import * as React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport { deepOrange } from \"@material-ui/core/colors\";\r\nimport Chart from \"../components/temp/Chart\";\r\nimport Deposits from \"../components/temp/Deposits\";\r\nimport Orders from \"../components/temp/Orders\";\r\nimport AppIcon from \"../components/ui/AppIcon\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    boxSizing: \"border-box\",\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[100]\r\n        : theme.palette.grey[900],\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n  },\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const toggleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {/* Chart */}\r\n        <Grid item xs={12} md={8} lg={9}>\r\n          <Paper className={fixedHeightPaper}>\r\n            <Chart />\r\n          </Paper>\r\n        </Grid>\r\n        {/* Recent Deposits */}\r\n        <Grid item xs={12} md={4} lg={3}>\r\n          <Paper className={fixedHeightPaper}>\r\n            <Deposits />\r\n          </Paper>\r\n        </Grid>\r\n        {/* Recent Orders */}\r\n        <Grid item xs={12}>\r\n          <Paper className={classes.paper}>\r\n            <Orders />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\config.tsx",["201"],"import { Color, Weekday } from \"../redux/redux\";\r\n\r\nexport default {\r\n  appName: \"Trackme\",\r\n  githubName: \"lucaslmlok\",\r\n  githubProfile: \"https://github.com/lucaslmlok\",\r\n  githubRepo: \"https://github.com/lucaslmlok/trackme-frontend\",\r\n  apiPath: \"http://localhost:5000\",\r\n  drawerWidth: 240,\r\n  dateFormat: \"yyyy-MM-DD\",\r\n};\r\n\r\nexport const ActionTypes = {\r\n  yesNo: \"Yes / No\",\r\n  number: \"Quantity\",\r\n};\r\n\r\nexport const Colors: Color[] = [\r\n  \"deepPurple\",\r\n  \"indigo\",\r\n  \"blue\",\r\n  \"lightBlue\",\r\n  \"cyan\",\r\n  \"teal\",\r\n  \"green\",\r\n  \"lightGreen\",\r\n  \"lime\",\r\n  \"yellow\",\r\n  \"amber\",\r\n  \"orange\",\r\n  \"red\",\r\n  \"pink\",\r\n  \"purple\",\r\n  \"deepOrange\",\r\n  \"brown\",\r\n  \"grey\",\r\n  \"blueGrey\",\r\n];\r\n\r\nexport const Icons = [\r\n  \"king_bed\",\r\n  \"hiking\",\r\n  \"local_dining\",\r\n  \"local_bar\",\r\n  \"local_cafe\",\r\n  \"pool\",\r\n  \"directions_run\",\r\n  \"fastfood\",\r\n  \"directions_bike\",\r\n  \"computer\",\r\n  \"favorite\",\r\n  \"local_pizza\",\r\n  \"sports_soccer\",\r\n  \"fitness_center\",\r\n  \"videogame_asset\",\r\n  \"alarm_on\",\r\n  \"menu_book\",\r\n  \"headset\",\r\n  \"commute\",\r\n  \"flight\",\r\n  \"shopping_cart\",\r\n  \"local_atm\",\r\n];\r\n\r\nexport const Weekdays: Weekday[] = [\r\n  \"mon\",\r\n  \"tue\",\r\n  \"wed\",\r\n  \"thu\",\r\n  \"fri\",\r\n  \"sat\",\r\n  \"sun\",\r\n];\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\AccountPage.tsx",["202","203","204"],"import {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Title from \"../components/ui/Title\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst AccountPage = () => {\r\n  const classes = useStyles();\r\n\r\n  const theme = useTheme();\r\n  const mobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <Grid container spacing={6}>\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}>\r\n          <Title>Personal Information</Title>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={4}>\r\n              <Typography variant=\"body2\">\r\n                Lorem Ipsum is simply dummy text of the printing and typesetting\r\n                industry. Lorem Ipsum has been the industry's standard dummy\r\n                text ever since the 1500s.\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={8}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    autoComplete=\"fname\"\r\n                    name=\"firstName\"\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    id=\"firstName\"\r\n                    label=\"First Name\"\r\n                    autoFocus\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    id=\"lastName\"\r\n                    label=\"Last Name\"\r\n                    name=\"lastName\"\r\n                    autoComplete=\"lname\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Update\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}>\r\n          <Title>Change Password</Title>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={4}>\r\n              <Typography variant=\"body2\">\r\n                Lorem Ipsum is simply dummy text of the printing and typesetting\r\n                industry. Lorem Ipsum has been the industry's standard dummy\r\n                text ever since the 1500s.\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={8}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    autoComplete=\"fname\"\r\n                    name=\"firstName\"\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    id=\"firstName\"\r\n                    label=\"Current Password\"\r\n                    autoFocus\r\n                  />\r\n                </Grid>\r\n\r\n                {!mobile && <Grid item xs={12} sm={6}></Grid>}\r\n\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    autoComplete=\"fname\"\r\n                    name=\"firstName\"\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    id=\"firstName\"\r\n                    label=\"New Password\"\r\n                    autoFocus\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    id=\"lastName\"\r\n                    label=\"Confirm New Password\"\r\n                    name=\"lastName\"\r\n                    autoComplete=\"lname\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Change Password\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}>\r\n          <Title>Delete Account</Title>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={4}>\r\n              <Typography variant=\"body2\">\r\n                Lorem Ipsum is simply dummy text of the printing and typesetting\r\n                industry.\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={8}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                    <Button variant=\"contained\" color=\"secondary\">\r\n                      Delete Account\r\n                    </Button>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AccountPage;\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\components\\ActionCard.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\ActionPage.tsx",["205"],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\ActionForm.tsx",["206"],"import { forwardRef, ReactElement, Ref, useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport _ from \"lodash\";\r\nimport {\r\n  Dialog,\r\n  AppBar,\r\n  Toolbar,\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  IconButton,\r\n  makeStyles,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Theme,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport { TransitionProps } from \"@material-ui/core/transitions\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport * as colors from \"@material-ui/core/colors\";\r\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport config from \"../../../utils/config\";\r\nimport { Colors, Icons, Weekdays, ActionTypes } from \"../../../utils/config\";\r\nimport { errorText, getErrorData, timeout } from \"../../../utils/helper\";\r\nimport { Action, State, Weekday } from \"../../../redux/redux\";\r\nimport useMobile from \"../../../hooks/useMobile\";\r\nimport * as actionActions from \"../../../redux/actions/action\";\r\nimport ColorButton from \"./ColorButton\";\r\nimport ActionIconButton from \"./IconButton\";\r\nimport WeekdayButton from \"./WeekdayButton\";\r\nimport ToastMsg from \"../../../components/ui/ToastMsg\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n    transition: \"background-color 500ms\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n  colorBtnGrid: {\r\n    display: \"grid\",\r\n    gridGap: 10,\r\n    gridTemplateColumns: \"repeat(auto-fill, minmax(40px, 1fr))\",\r\n    marginTop: 12,\r\n  },\r\n  iconBtnGrid: {\r\n    display: \"grid\",\r\n    gridGap: 10,\r\n    gridTemplateColumns: \"repeat(auto-fill, minmax(50px, 1fr))\",\r\n    marginTop: 12,\r\n  },\r\n  weekdayBtnGrid: {\r\n    display: \"grid\",\r\n    gridGap: 10,\r\n    gridTemplateColumns: \"repeat(auto-fill, minmax(55px, 1fr))\",\r\n    marginTop: 12,\r\n    marginBottom: 10,\r\n  },\r\n}));\r\n\r\nconst getSchema = (actionType: string) => {\r\n  return yup.object().shape({\r\n    name: yup.string().required(),\r\n    ...(actionType === \"number\"\r\n      ? {\r\n          target: yup.number().required().positive().integer(),\r\n          increment: yup.number().required().positive().integer(),\r\n          unit: yup.string().required(),\r\n        }\r\n      : null),\r\n  });\r\n};\r\n\r\nconst getDefaultValues = (action: Action) => {\r\n  return {\r\n    type: action?.type || \"yesNo\",\r\n    color: action?.color || Colors[0],\r\n    icon: action?.icon || Icons[0],\r\n    startDate: moment(action?.startDate).startOf(\"day\"),\r\n    endDate: action?.endDate ? moment(action.endDate).startOf(\"day\") : null,\r\n    weekdays: action?.weekdays || [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"],\r\n  };\r\n};\r\n\r\nconst Transition = forwardRef(function Transition(\r\n  props: TransitionProps & { children?: ReactElement },\r\n  ref: Ref<unknown>\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ntype Props = {\r\n  isOpen: boolean;\r\n  selectedId?: string;\r\n  onClose: Function;\r\n};\r\n\r\nconst ActionForm = ({ isOpen, selectedId, onClose }: Props) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const isMobile = useMobile();\r\n\r\n  const { actionList } = useSelector((state: State) => state.action);\r\n  const action = actionList.find((a) => a.id === selectedId);\r\n  const defaultValues = getDefaultValues(action);\r\n\r\n  const [actionType, setActionType] = useState(defaultValues.type);\r\n  const [actionColor, setActionColor] = useState(defaultValues.color);\r\n  const [actionIcon, setActionIcon] = useState(defaultValues.icon);\r\n  const [startDate, setStartDate] = useState(defaultValues.startDate);\r\n  const [endDate, setEndDate] = useState(defaultValues.endDate);\r\n  const [actionWeekdays, setActionWeekdays] = useState(defaultValues.weekdays);\r\n\r\n  const { control, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(getSchema(actionType)),\r\n  });\r\n\r\n  const toggleWeekday = (weekday: Weekday) => {\r\n    let newWeekdays: Weekday[];\r\n    const index = actionWeekdays.indexOf(weekday);\r\n    if (index === -1) {\r\n      newWeekdays = [...actionWeekdays, weekday];\r\n    } else {\r\n      newWeekdays = actionWeekdays.filter((w) => w !== weekday);\r\n    }\r\n    setActionWeekdays(newWeekdays);\r\n  };\r\n\r\n  const resetValues = () => {\r\n    setActionType(defaultValues.type);\r\n    setActionColor(defaultValues.color);\r\n    setActionIcon(defaultValues.icon);\r\n    setStartDate(defaultValues.startDate);\r\n    setEndDate(defaultValues.endDate);\r\n    setActionWeekdays(defaultValues.weekdays);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    const newAction: Action = _.cloneDeep(data);\r\n    newAction.type = actionType;\r\n    newAction.color = actionColor;\r\n    newAction.icon = actionIcon;\r\n    newAction.startDate = startDate.format(config.dateFormat);\r\n    newAction.endDate = endDate ? endDate.format(config.dateFormat) : null;\r\n    newAction.weekdays = actionWeekdays;\r\n\r\n    if (newAction.type === \"yesNo\") {\r\n      newAction.target = 1;\r\n      newAction.increment = 1;\r\n      newAction.unit = \"unit\";\r\n    }\r\n\r\n    if (action) newAction.id = action.id;\r\n\r\n    const result: any = await dispatch(actionActions.updateAction(newAction));\r\n    if (result.error) {\r\n      const body = getErrorData(result.data);\r\n      toast.error(<ToastMsg title={result.message} body={body} />);\r\n    } else {\r\n      toast.success(<ToastMsg title={result} />);\r\n      await timeout();\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetValues();\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen={isMobile}\r\n      open={isOpen}\r\n      onClose={() => onClose()}\r\n      TransitionComponent={Transition}\r\n    >\r\n      {isOpen && (\r\n        <form noValidate onSubmit={handleSubmit(onSubmit)}>\r\n          <AppBar\r\n            className={classes.appBar}\r\n            style={{ backgroundColor: colors[actionColor][800] }}\r\n          >\r\n            <Toolbar>\r\n              <IconButton\r\n                edge=\"start\"\r\n                color=\"inherit\"\r\n                onClick={() => onClose()}\r\n                aria-label=\"close\"\r\n              >\r\n                <CloseIcon />\r\n              </IconButton>\r\n              <Typography variant=\"h6\" className={classes.title}>\r\n                {`${!!action ? \"Edit\" : \"Add\"} Action`}\r\n              </Typography>\r\n              <Button autoFocus color=\"inherit\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </Toolbar>\r\n          </AppBar>\r\n          <Box px={4} pt={3} pb={6}>\r\n            <Grid container spacing={4}>\r\n              <Grid item xs={12}>\r\n                <Controller\r\n                  as={TextField}\r\n                  name=\"name\"\r\n                  label=\"Action Name\"\r\n                  control={control}\r\n                  defaultValue={action?.name || \"\"}\r\n                  required\r\n                  fullWidth\r\n                  error={!!errors?.name}\r\n                  helperText={errorText(errors, \"name\")}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Box mb={-1}>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Action Type *</FormLabel>\r\n\r\n                    <RadioGroup\r\n                      aria-label=\"promoting\"\r\n                      style={{ flexDirection: \"row\" }}\r\n                      value={actionType}\r\n                      onChange={(e) => setActionType(e.target.value as any)}\r\n                    >\r\n                      {Object.keys(ActionTypes).map((key) => (\r\n                        <FormControlLabel\r\n                          value={key}\r\n                          control={<Radio />}\r\n                          label={ActionTypes[key]}\r\n                        />\r\n                      ))}\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Box>\r\n              </Grid>\r\n\r\n              {actionType === \"number\" && (\r\n                <>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <Controller\r\n                      as={TextField}\r\n                      type=\"number\"\r\n                      name=\"target\"\r\n                      label=\"Quantity Target\"\r\n                      control={control}\r\n                      defaultValue={action?.target || 1}\r\n                      required\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      error={!!errors?.target}\r\n                      helperText={errorText(errors, \"target\")}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <Controller\r\n                      as={TextField}\r\n                      type=\"number\"\r\n                      name=\"increment\"\r\n                      label=\"Quantity Increment\"\r\n                      control={control}\r\n                      defaultValue={action?.increment || 1}\r\n                      required\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      error={!!errors?.increment}\r\n                      helperText={errorText(errors, \"increment\")}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <Controller\r\n                      as={TextField}\r\n                      name=\"unit\"\r\n                      label=\"Quantity Unit\"\r\n                      control={control}\r\n                      defaultValue={action?.unit || \"unit\"}\r\n                      required\r\n                      fullWidth\r\n                      variant=\"outlined\"\r\n                      error={!!errors?.unit}\r\n                      helperText={errorText(errors, \"unit\")}\r\n                    />\r\n                  </Grid>\r\n                </>\r\n              )}\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\" style={{ width: \"100%\" }}>\r\n                  <FormLabel component=\"legend\">Action Color *</FormLabel>\r\n                  <Box className={classes.colorBtnGrid}>\r\n                    {Colors.map((color) => (\r\n                      <ColorButton\r\n                        key={`color-btn-${color}`}\r\n                        color={color}\r\n                        selected={actionColor}\r\n                        onSelect={(selected) => setActionColor(selected)}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\" style={{ width: \"100%\" }}>\r\n                  <FormLabel component=\"legend\">Action Icon *</FormLabel>\r\n                  <Box className={classes.iconBtnGrid}>\r\n                    {Icons.map((icon) => (\r\n                      <ActionIconButton\r\n                        key={`icon-btn-${icon}`}\r\n                        icon={icon}\r\n                        color={actionColor}\r\n                        selected={actionIcon}\r\n                        onSelect={(selected) => setActionIcon(selected)}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <DatePicker\r\n                    fullWidth\r\n                    autoOk\r\n                    required\r\n                    label=\"Starting Date\"\r\n                    format=\"DD/MM/yyyy\"\r\n                    value={startDate}\r\n                    onChange={(date) => setStartDate(date)}\r\n                    maxDate={endDate || undefined}\r\n                    error={!!errors?.startDate}\r\n                    helperText={errorText(errors, \"startDate\")}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <DatePicker\r\n                    clearable\r\n                    fullWidth\r\n                    autoOk\r\n                    label=\"Ending Date\"\r\n                    format=\"DD/MM/yyyy\"\r\n                    value={endDate}\r\n                    onChange={(date) => setEndDate(date as any)}\r\n                    minDate={startDate}\r\n                    error={!!errors?.endDate}\r\n                    helperText={errorText(errors, \"endDate\")}\r\n                  />\r\n                </Grid>\r\n              </MuiPickersUtilsProvider>\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\" style={{ width: \"100%\" }}>\r\n                  <FormLabel component=\"legend\">Action Weekdays *</FormLabel>\r\n                  <Box className={classes.weekdayBtnGrid}>\r\n                    {Weekdays.map((weekday) => (\r\n                      <WeekdayButton\r\n                        key={`weekday-btn-${weekday}`}\r\n                        weekday={weekday}\r\n                        active={actionWeekdays.includes(weekday)}\r\n                        onSelect={() => toggleWeekday(weekday)}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  color=\"primary\"\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ActionForm;\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\ColorButton.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\IconButton.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\WeekdayButton.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\theme.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\auth\\AuthPage.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\hooks\\useMobile.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\auth\\components\\AuthBanner.tsx",["207"],"import { Box, Typography, makeStyles } from \"@material-ui/core\";\r\n\r\nimport useMobile from \"../../../hooks/useMobile\";\r\nimport AppIcon from \"../../../components/ui/AppIcon\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  banner: {\r\n    position: \"absolute\",\r\n    zIndex: -1,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    objectFit: \"cover\",\r\n  },\r\n  bannerOverlay: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"rgba(22, 9, 44, 0.6)\",\r\n  },\r\n  bannerText: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    display: \"inline\",\r\n    letterSpacing: 2,\r\n  },\r\n  colorBannerText: {\r\n    fontWeight: \"bold\",\r\n    display: \"inline\",\r\n    letterSpacing: 2,\r\n  },\r\n  bannerDesc: {\r\n    color: \"#ddd\",\r\n  },\r\n}));\r\n\r\nconst AuthBanner = () => {\r\n  const classes = useStyles();\r\n  const isMobile = useMobile();\r\n\r\n  return (\r\n    <>\r\n      <Box position=\"relative\" width={1} height={1}>\r\n        <video\r\n          autoPlay\r\n          loop\r\n          muted\r\n          className={classes.banner}\r\n          style={{ display: isMobile ? \"none\" : \"block\" }}\r\n        >\r\n          <source src=\"banner.mp4\" type=\"video/mp4\" />\r\n        </video>\r\n        <img\r\n          src=\"banner.jpg\"\r\n          className={classes.banner}\r\n          style={{ display: isMobile ? \"block\" : \"none\" }}\r\n        />\r\n        <Box\r\n          className={classes.bannerOverlay}\r\n          px={isMobile ? 4 : 12}\r\n          py={isMobile ? 4 : 8}\r\n        >\r\n          <Box display=\"flex\" width={1} mb={isMobile ? 2 : 6}>\r\n            <AppIcon titleColor=\"white\" size={isMobile ? \"default\" : \"large\"} />\r\n          </Box>\r\n          <Typography\r\n            variant=\"h2\"\r\n            className={classes.bannerText}\r\n            style={{ fontSize: isMobile ? 30 : 60 }}\r\n          >\r\n            <Typography\r\n              color=\"secondary\"\r\n              className={classes.colorBannerText}\r\n              style={{ fontSize: isMobile ? 30 : 60 }}\r\n            >\r\n              Track\r\n            </Typography>{\" \"}\r\n            Your Life\r\n            <br />\r\n            Seamlessly.\r\n          </Typography>\r\n          <Box\r\n            className={classes.bannerDesc}\r\n            mt={isMobile ? 2 : 6}\r\n            style={{\r\n              fontSize: isMobile ? 16 : 20,\r\n              lineHeight: isMobile ? 1.8 : 2,\r\n            }}\r\n          >\r\n            A productivity tools helps people monitor their\r\n            <br />\r\n            and do their best work by being effective.\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthBanner;\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\auth\\components\\AuthForm.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\helper.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\store.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\reducers\\auth.ts",["208"],"import { AuthState } from \"../redux\";\r\nimport * as actionTypes from \"../actionTypes\";\r\n\r\nconst initialState: AuthState = {\r\n  tokenCheck: false,\r\n  token: null,\r\n  userId: null,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.TOKEN_CHECK:\r\n      return { ...state, tokenCheck: true };\r\n    case actionTypes.AUTH_IN:\r\n      return { ...state, token: payload.token, userId: payload.userId };\r\n    case actionTypes.AUTH_OUT:\r\n      return { ...state, token: null, userId: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actionTypes.ts",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actions\\auth.ts",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\utils\\urls.tsx",["209"],"import config from \"./config\";\r\n\r\nconst { apiPath } = config;\r\n\r\nexport default {\r\n  signup: apiPath + \"/user/signup\",\r\n  login: apiPath + \"/user/login\",\r\n  tokenLogin: apiPath + \"/user/token-login\",\r\n  action: apiPath + \"/action\",\r\n  actionRecord: apiPath + \"/action-record\",\r\n};\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\temp\\Chart.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\temp\\Orders.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\temp\\Deposits.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\Title.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\Copyright.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\AppIcon.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\Loading.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\NavWrapper.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\ui\\ToastMsg.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\navListItems.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\NavBar.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\components\\nav\\NavDrawer.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\TrackingPage.tsx",["210"],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\actions\\components\\ActionList.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\reducers\\action.ts",["211"],"import { ActionState } from \"../redux\";\r\n\r\nimport * as actionTypes from \"../actionTypes\";\r\n\r\nconst initialState: ActionState = {\r\n  actionList: [],\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.UPDATE_ACTION_LIST:\r\n      return { ...state, actionList: payload.actionList };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actions\\action.ts",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\reducers\\tracking.ts",["212"],"import moment from \"moment\";\r\n\r\nimport { TrackingState } from \"../redux\";\r\nimport * as actionTypes from \"../actionTypes\";\r\nimport config from \"../../utils/config\";\r\n\r\nconst initialState: TrackingState = {\r\n  date: moment().format(config.dateFormat),\r\n  recordList: [],\r\n  recordLoading: false,\r\n  recordError: false,\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case actionTypes.SET_DATE:\r\n      return { ...state, date: payload.date };\r\n    case actionTypes.RECORD_LIST_LOADING:\r\n      return {\r\n        ...state,\r\n        recordLoading: true,\r\n        recordError: false,\r\n        recordList: [],\r\n      };\r\n    case actionTypes.UPDATE_RECORD_LIST:\r\n      return { ...state, recordLoading: false, recordList: payload.recordList };\r\n    case actionTypes.RECORD_LIST_ERROR:\r\n      return { ...state, recordLoading: false, recordError: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\redux\\actions\\tracking.tsx",["213"],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\components\\TrackCalendar.tsx",[],"C:\\Users\\lucas\\Documents\\side_projects\\trackme\\frontend\\src\\pages\\tracking\\components\\TrackingList.tsx",[],{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":29,"column":6,"nodeType":"220","endLine":29,"endColumn":8,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":4,"column":8,"nodeType":"224","messageId":"225","endLine":4,"endColumn":19},{"ruleId":"222","severity":1,"message":"226","line":5,"column":8,"nodeType":"224","messageId":"225","endLine":5,"endColumn":14},{"ruleId":"222","severity":1,"message":"227","line":6,"column":8,"nodeType":"224","messageId":"225","endLine":6,"endColumn":11},{"ruleId":"222","severity":1,"message":"228","line":7,"column":8,"nodeType":"224","messageId":"225","endLine":7,"endColumn":14},{"ruleId":"222","severity":1,"message":"229","line":8,"column":8,"nodeType":"224","messageId":"225","endLine":8,"endColumn":15},{"ruleId":"222","severity":1,"message":"230","line":9,"column":8,"nodeType":"224","messageId":"225","endLine":9,"endColumn":14},{"ruleId":"222","severity":1,"message":"231","line":10,"column":8,"nodeType":"224","messageId":"225","endLine":10,"endColumn":12},{"ruleId":"222","severity":1,"message":"232","line":11,"column":8,"nodeType":"224","messageId":"225","endLine":11,"endColumn":18},{"ruleId":"222","severity":1,"message":"233","line":12,"column":8,"nodeType":"224","messageId":"225","endLine":12,"endColumn":15},{"ruleId":"222","severity":1,"message":"234","line":13,"column":8,"nodeType":"224","messageId":"225","endLine":13,"endColumn":18},{"ruleId":"222","severity":1,"message":"235","line":14,"column":8,"nodeType":"224","messageId":"225","endLine":14,"endColumn":13},{"ruleId":"222","severity":1,"message":"236","line":15,"column":8,"nodeType":"224","messageId":"225","endLine":15,"endColumn":17},{"ruleId":"222","severity":1,"message":"237","line":18,"column":8,"nodeType":"224","messageId":"225","endLine":18,"endColumn":12},{"ruleId":"222","severity":1,"message":"238","line":19,"column":8,"nodeType":"224","messageId":"225","endLine":19,"endColumn":16},{"ruleId":"222","severity":1,"message":"239","line":20,"column":8,"nodeType":"224","messageId":"225","endLine":20,"endColumn":23},{"ruleId":"222","severity":1,"message":"240","line":25,"column":8,"nodeType":"224","messageId":"225","endLine":25,"endColumn":15},{"ruleId":"222","severity":1,"message":"241","line":120,"column":9,"nodeType":"224","messageId":"225","endLine":120,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":3,"column":1,"nodeType":"244","endLine":11,"endColumn":3},{"ruleId":"222","severity":1,"message":"245","line":2,"column":3,"nodeType":"224","messageId":"225","endLine":2,"endColumn":12},{"ruleId":"222","severity":1,"message":"246","line":3,"column":3,"nodeType":"224","messageId":"225","endLine":3,"endColumn":19},{"ruleId":"222","severity":1,"message":"247","line":4,"column":3,"nodeType":"224","messageId":"225","endLine":4,"endColumn":19},{"ruleId":"218","severity":1,"message":"248","line":132,"column":6,"nodeType":"220","endLine":132,"endColumn":8,"suggestions":"249"},{"ruleId":"218","severity":1,"message":"250","line":182,"column":6,"nodeType":"220","endLine":182,"endColumn":14,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":51,"column":9,"nodeType":"254","endLine":55,"endColumn":11},{"ruleId":"242","severity":1,"message":"255","line":10,"column":1,"nodeType":"244","endLine":21,"endColumn":3},{"ruleId":"242","severity":1,"message":"243","line":5,"column":1,"nodeType":"244","endLine":11,"endColumn":3},{"ruleId":"218","severity":1,"message":"219","line":31,"column":6,"nodeType":"220","endLine":31,"endColumn":8,"suggestions":"256"},{"ruleId":"242","severity":1,"message":"255","line":9,"column":1,"nodeType":"244","endLine":16,"endColumn":3},{"ruleId":"242","severity":1,"message":"255","line":14,"column":1,"nodeType":"244","endLine":32,"endColumn":3},{"ruleId":"222","severity":1,"message":"257","line":9,"column":37,"nodeType":"224","messageId":"225","endLine":9,"endColumn":44},"no-native-reassign",["258"],"no-negated-in-lhs",["259"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["260"],"@typescript-eslint/no-unused-vars","'CssBaseline' is defined but never used.","Identifier","unusedVar","'Drawer' is defined but never used.","'Box' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Avatar' is defined but never used.","'List' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'IconButton' is defined but never used.","'Badge' is defined but never used.","'Container' is defined but never used.","'Link' is defined but never used.","'MenuIcon' is defined but never used.","'ChevronLeftIcon' is defined but never used.","'AppIcon' is defined but never used.","'toggleDrawer' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Accordion' is defined but never used.","'AccordionDetails' is defined but never used.","'AccordionSummary' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'query'. Either include them or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'resetValues'. Either include it or remove the dependency array.",["262"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assign arrow function to a variable before exporting as module default",["263"],"'timeout' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"264","fix":"270"},"Update the dependencies array to be: [dispatch]",{"range":"271","text":"272"},"Update the dependencies array to be: [dispatch, query]",{"range":"273","text":"274"},"Update the dependencies array to be: [isOpen, resetValues]",{"range":"275","text":"276"},{"range":"277","text":"272"},[976,978],"[dispatch]",[3780,3782],"[dispatch, query]",[5723,5731],"[isOpen, resetValues]",[878,880]]